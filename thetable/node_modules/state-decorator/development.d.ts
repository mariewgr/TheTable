import type { DecoratedActions, MiddlewareFactory } from './types';
export type Logger = {
    log: (...args: any[]) => void;
    group: (...args: any[]) => void;
    groupCollapsed: (...args: any[]) => void;
    groupEnd: (...args: any[]) => void;
};
export declare let logEffects: <S, A extends DecoratedActions, P>(log?: (...msg: any[]) => void) => MiddlewareFactory<S, A, P>;
export declare let logDetailedEffects: <S, A extends DecoratedActions, P>(logger?: Logger) => MiddlewareFactory<S, A, P>;
export declare let devtools: <S, A extends DecoratedActions, P>() => MiddlewareFactory<S, A, P>;
